from enum import Enum

Token = Enum('Token', [
  
  
  'INTEGER', 
  'CHAR',  
  'BOOLEAN', 
  'STRING',  
  'TYPE',  
  'EQUALS',  
  'ARRAY',  
  'LEFT_SQUARE',  
  'RIGHT_SQUARE', 
  'OF',  
  'STRUCT',  
  'LEFT_BRACES',  
  'RIGHT_BRACES', 
  'SEMI_COLON',  
  'COLON',  
  'FUNCTION', 
  'LEFT_PARENTHESIS',  
  'RIGHT_PARENTHESIS',  
  'COMMA',  
  'VAR',  
  'IF',  
  'ELSE', 
  'WHILE', 
  'DO',  
  'BREAK',  
  'CONTINUE',  
  'AND', 
  'OR',  
  'LESS_THAN',  
  'GREATER_THAN',  
  'LESS_OR_EQUAL',  
  'GREATER_OR_EQUAL', 
  'EQUAL_EQUAL',  
  'NOT_EQUAL',  
  'PLUS',  
  'MINUS',  
  'DIVIDE',  
  'PLUS_PLUS',  
  'MINUS_MINUS',  
  'TIMES', 
  'NOT', 
  'DOT',  
  'ID', 
  'TRUE',  
  'FALSE',  

  'CHARACTER',  
  'STRINGVAL', 
  'NUMERAL',  
  'EOF',  # Caracter '\x03'

  # 'RETURN', 
  # 'FLOAT', 
  # 'INT_NUMERAL', 
  # 'FLOAT_NUMERAL', 
  # 'UNKNOWN',   
], start=0)

keyWords = {
  "array": Token.ARRAY,
  "boolean": Token.BOOLEAN,
  "break": Token.BREAK,
  "char": Token.CHAR,
  "continue": Token.CONTINUE,
  "do": Token.DO,
  "else": Token.ELSE,
  "false": Token.FALSE,
  "function": Token.FUNCTION,
  # "return": Token.RETURN,
  "if": Token.IF,
  "integer": Token.INTEGER,
  # "float": Token.FLOAT,
  "of": Token.OF,
  "string": Token.STRING,
  "struct": Token.STRUCT,
  "true": Token.TRUE,
  "type": Token.TYPE,
  "var": Token.VAR,
  "while": Token.WHILE,
  ":": Token.COLON,
  ";": Token.SEMI_COLON,
  ",": Token.COMMA,
  "=": Token.EQUALS,
  "[": Token.LEFT_SQUARE,
  "]": Token.RIGHT_SQUARE,
  "{": Token.LEFT_BRACES,
  "}": Token.RIGHT_BRACES,
  "(": Token.LEFT_PARENTHESIS,
  ")": Token.RIGHT_PARENTHESIS,
  "and": Token.AND,
  "or": Token.OR,
  "<": Token.LESS_THAN,
  ">": Token.GREATER_THAN,
  "<=": Token.LESS_OR_EQUAL,
  ">=": Token.GREATER_OR_EQUAL,
  "!=": Token.NOT_EQUAL,
  "==": Token.EQUAL_EQUAL,
  "+": Token.PLUS,
  "++": Token.PLUS_PLUS,
  "-": Token.MINUS,
  "--": Token.MINUS_MINUS,
  "*": Token.TIMES,
  "/": Token.DIVIDE,
  ".": Token.DOT,
  "!": Token.NOT,
  '\x03': Token.EOF
}